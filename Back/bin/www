if (process.env.NODE_ENV) {    
    require("dotenv").config({path: `.env.${process.env.NODE_ENV}`});
}

const app = require('../app')
const debug = require('debug')('base-api-express-generator:server')
const http = require('http')
const figlet = require('figlet')
const mongoose = require('mongoose')
const pkg = require('../package.json')
const port = process.env.PORT || 3000
app.set('port', port)
const server = http.createServer(app)
const db_url = process.env.MONGO_URL || 'mongodb://127.0.0.1:27017/'
const db_name = process.env.MONGO_DB || 'prueba'
try {
    initDatabase ();    
}
catch (err) {
    console.error(err)
    process.exit(1); // Salir si no se puede conectar
};
// Listen on provided port, on all network interfaces.
server.listen(port, printTitle())
server.on('error', onError)
server.on('listening', onListening)

// Event listener for HTTP server "error" event.
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }
    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

// Event listener for HTTP server "listening" event.
function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    debug('Listening on ' + bind)
}

// Prints the app title and more specifications
function printTitle() {    
    process.stdout.write(`\n${figlet.textSync(`biblioteca`, { font: 'Ogre' })}`);
    process.stdout.write(`\n${figlet.textSync(process.env.NODE_ENV || "no env", { font: 'Ogre' })}\n`);
    //process.stdout.write(`\nVersion: ${pkg.version}\nListening on port ${port}\n`,);
    process.stdout.write(`\nPuerto del backend: ${port}\n`);
}

async function initDatabase() {
    await mongoose.connect(db_url + db_name);
    console.log(`Conexión a la base de datos exitosa.\n(${db_url + db_name})`);
}

/*
initDatabase()
    .then(() => {
        console.log(`Conexión a la base de datos exitosa.\n(${db_url + db_name})`);        
    })
    .catch((err) => console.log(err))
*/